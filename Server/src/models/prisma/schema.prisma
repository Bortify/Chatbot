datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider             = "prisma-client-js"
  recursive_type_depth = 5
}

enum AuthorType {
  MACHINE
  USER
}

enum DataStreamType {
  SITE
  TEXT
}

// data models
model Organisation {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  logo        String
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatbots    Chatbot[]
  archived    Boolean   @default(false)
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  email           String
  phone           String?
  passwordHash    String
  salt            String
  organisation    Organisation[]
  archived        Boolean        @default(false)
  isEmailVerified Boolean        @default(false)
}

model Chatbot {
  id             Int            @id @default(autoincrement())
  key            String?        @default(uuid())
  name           String
  configuration  Json
  conversations  Conversation[]
  dataLake       DataStream[]
  knowledgeBase  KnowledgeBase?
  archived       Boolean        @default(false)
  active         Boolean        @default(true)
  organisationId Int
  organisation   Organisation   @relation(fields: [organisationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model KnowledgeBase {
  id        Int      @id @default(autoincrement())
  indexName String
  chatbotId Int      @unique
  chatbot   Chatbot? @relation(fields: [chatbotId], references: [id])
}

model Conversation {
  id        String    @id
  name      String    @default("Anonymous")
  chatbotId Int
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages  Message[]
  summary   String    @default("")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  timestamp      DateTime     @default(now())
  author         AuthorType
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model DataStream {
  id        Int            @id @default(autoincrement())
  name      String
  data      Json
  chatbotId Int
  chatbot   Chatbot?       @relation(fields: [chatbotId], references: [id])
  archived  Boolean        @default(false)
  type      DataStreamType
  indexIds  String[]
}
